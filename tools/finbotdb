#!/usr/bin/env python3.7
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from finbot.model import (
    Base,
    Provider,
    UserAccount,
    UserAccountSettings,
    LinkedAccount
)
from finbot.core import crypto
import argparse
import json


def build_tool(settings, engine, session):
    Base.metadata.create_all(engine)


def destroy_tool(settings, engine, session):
    Base.metadata.drop_all(engine)


def hydrate_tool(settings, engine, session):
    with open(settings.secret) as kf:
        secret = kf.read()
        with open(settings.accounts, "rb") as af:
            accounts = json.loads(crypto.fernet_decrypt(af.read(), secret))["accounts"]

    providers = {
        "vanguard_uk": Provider(
            id="vanguard_uk",
            description="Vanguard Investors (UK)",
            website_url="https://www.vanguardinvestor.co.uk/",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                    },
                    "password": {
                        "type": "string",
                    }
                }
            }
        ),
        "aegon_targetplan_uk": Provider(
            id="aegon_targetplan_uk",
            description="Aegon Targetplan (UK)",
            website_url="https://lwp.aegon.co.uk/targetplanUI/login",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "idn-email",
                    },
                    "password": {
                        "type": "string",
                    }
                }
            }
        ),
        "barclays_uk": Provider(
            id="barclays_uk",
            description="Barclays (UK)",
            website_url="https://www.barclays.co.uk/",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "last_name": {
                        "type": "string",
                    },
                    "card_number": {
                        "type": "string",
                        "pattern": r"\d{4}-\d{4}-\d{4}-\d{4}"
                    },
                    "passcode": {
                        "type": "string",
                        "pattern": r"\d{5}"
                    },
                    "memorable_word": {
                        "type": "string"
                    }
                }
            }
        ),
        "ca_fr": Provider(
            id="ca_fr",
            description="Credit Agricole (FR)",
            website_url="https://www.credit-agricole.fr/",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "account_number": {
                        "type": "string",
                        "pattern": r"\d+"
                    },
                    "password": {
                        "type": "string",
                        "pattern": r"\d{6}"
                    }
                }
            }
        ),
        "lending_works_uk": Provider(
            id="lending_works_uk",
            description="Lending Works (UK)",
            website_url="https://www.lendingworks.co.uk/",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "idn-email",
                    },
                    "password": {
                        "type": "string",
                    }
                }
            }
        ),
        "october_fr": Provider(
            id="october_fr",
            description="October (FR)",
            website_url="https://fr.october.eu/",
            credentials_schema={
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "email": {
                        "type": "idn-email",
                    },
                    "password": {
                        "type": "string",
                    }
                }
            }
        ),
        "dummy_uk": Provider(
            id="dummy_uk",
            description="Dummy (fake) provider (UK)",
            website_url="https://dummy.co.uk/",
            credentials_schema={}
        )
    }
    session.add_all(providers.values())
    session.add_all([
        UserAccount(
            email="test1@finbot.net",
            encrypted_password=crypto.fernet_encrypt(
                "test".encode(), secret).decode(),
            full_name="Test user (1)",
            settings=UserAccountSettings(
                valuation_ccy="USD"
            ),
            linked_accounts=[
                LinkedAccount(
                    provider=providers[account["provider_id"]],
                    account_name=providers[account["provider_id"]].description,
                    encrypted_credentials=crypto.fernet_encrypt(
                        json.dumps(account["credentials"]).encode(), secret).decode()
                )
                for account in accounts
                if account["provider_id"] in {"dummy_uk"}
            ]
        ),
        UserAccount(
            email="test2@finbot.net",
            encrypted_password=crypto.fernet_encrypt(
                "test".encode(), secret).decode(),
            full_name="Test user (2)",
            settings=UserAccountSettings(
                valuation_ccy="EUR"
            ),
            linked_accounts=[
                LinkedAccount(
                    provider=providers[account["provider_id"]],
                    account_name=providers[account["provider_id"]].description,
                    encrypted_credentials=crypto.fernet_encrypt(
                        json.dumps(account["credentials"]).encode(), secret).decode()
                )
                for account in accounts
                if account["provider_id"] not in {"dummy_uk"}
            ]
        )
    ])
    session.commit()


def setup_hydrate_subparser(parser):
    parser.add_argument("-k", "--secret", type=str, help="path to secret key", required=True)
    parser.add_argument("-A", "--accounts", type=str, help="path to accounts file", required=True)


def create_parser():
    parser = argparse.ArgumentParser(prog='finbotdb utility')
    subparsers = parser.add_subparsers(help='tools')
    for tool_name, tool in all_tools.items():
        subparser = subparsers.add_parser(tool_name, help=tool["description"])
        subparser.set_defaults(tool_name=tool_name)
        tool["parser_builder"](subparser)
    return parser


all_tools = {
    "build": {
        "description": "create all tables in database",
        "parser_builder": (lambda _: None),
        "handler": build_tool
    },
    "destroy": {
        "description": "remove all tables in database",
        "parser_builder": (lambda _: None),
        "handler": destroy_tool
    },
    "hydrate": {
        "description": "hydrate database with initial (test) data",
        "parser_builder": setup_hydrate_subparser,
        "handler": hydrate_tool
    }
}


def main():
    parser = create_parser()
    settings = parser.parse_args()
    if not hasattr(settings, "tool_name"):
        parser.print_usage()
        return
    db_engine = create_engine('postgresql+psycopg2://finbot:finbot@127.0.0.1/finbot')
    db_session = sessionmaker(bind=db_engine)()
    return all_tools[settings.tool_name]["handler"](settings, db_engine, db_session)


if __name__ == "__main__":
    main()
